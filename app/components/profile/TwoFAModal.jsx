import React, { useState } from "react";
import { useTwoFAModal } from "@/app/providers/TwoFAModalProvider";
import { apiClient } from "@/app/lib/api/client";
import Button from "@/app/components/ui/Button";

export default function TwoFAModal() {
  const {
    show2FAModal,
    qrCode,
    totpSecret,
    twoFALoading,
    twoFAError,
    setTwoFAError,
    setTwoFALoading,
    close2FAModal,
    onVerify,
  } = useTwoFAModal();
  const [code, setCode] = useState("");
  const [success, setSuccess] = useState(false);

  if (!show2FAModal) return null;

  const handleVerify = async (e) => {
    e.preventDefault();
    setTwoFAError("");
    setTwoFALoading(true);
    setSuccess(false);
    try {
      // Call /2fa/verify with token and secret
      const response = await apiClient.post("/2fa/verify", {
        token: code,
        secret: totpSecret,
      });
      if (response.success) {
        setSuccess(true);
        setCode("");
        onVerify && onVerify();
        setTimeout(() => {
          setSuccess(false);
          close2FAModal();
        }, 3000);
      } else {
        setTwoFAError(response.message || "Invalid or expired code.");
      }
    } catch (err) {
      setTwoFAError(err.message || "Invalid or expired code.");
    } finally {
      setTwoFALoading(false);
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-white/30 backdrop-blur-sm">
      <div className="bg-white rounded-xl shadow-lg max-w-md w-full p-6 relative animate-fadeIn">
        <button
          className="absolute top-3 right-3 text-gray-400 hover:text-gray-700"
          onClick={close2FAModal}
          aria-label="Close"
        >
          ×
        </button>
        <h2 className="text-xl font-bold mb-2 text-center">
          Enable Two-Factor Authentication
        </h2>
        <ol className="mb-4 text-gray-700 text-sm list-decimal list-inside">
          <li>
            Scan the QR code below with your authenticator app (Google
            Authenticator, Authy, etc.).
          </li>
          <li>
            Enter the 6-digit code generated by your app to verify and enable
            2FA.
          </li>
        </ol>
        <div className="flex justify-center mb-4">
          {qrCode ? (
            <img
              src={qrCode}
              alt="2FA QR Code"
              className="w-40 h-40 border p-2 bg-white rounded"
            />
          ) : (
            <div className="w-40 h-40 flex items-center justify-center bg-gray-100 rounded animate-pulse">
              Loading...
            </div>
          )}
        </div>
        <form onSubmit={handleVerify} className="space-y-3">
          <input
            type="text"
            inputMode="numeric"
            pattern="[0-9]{6}"
            maxLength={6}
            minLength={6}
            required
            className="w-full border rounded px-3 py-2 text-lg tracking-widest text-center"
            placeholder="Enter 6-digit code"
            value={code}
            onChange={(e) => setCode(e.target.value.replace(/\D/g, ""))}
            disabled={twoFALoading || success}
            autoFocus
          />
          {twoFAError && (
            <div className="text-red-600 text-sm text-center">{twoFAError}</div>
          )}
          {success && (
            <div className="text-green-600 text-sm text-center font-medium bg-green-50 p-3 rounded-lg border border-green-200">
              ✅ 2FA enabled successfully! Redirecting...
            </div>
          )}
          <button
            type="submit"
            className="w-full mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            disabled={twoFALoading || code.length !== 6 || success}
          >
            {twoFALoading
              ? "Verifying..."
              : success
              ? "Success!"
              : "Verify & Enable 2FA"}
          </button>
        </form>
      </div>
    </div>
  );
}
